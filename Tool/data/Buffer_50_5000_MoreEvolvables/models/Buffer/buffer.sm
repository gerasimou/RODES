ctmc

//const int max_slow_buffer = 31;
//const int max_fast_buffer = 21;
evolve const int max_slow_buffer [20..40];
evolve const int max_fast_buffer [10..30];

const double s_rate = 30;
const double r_fast_rate = 15;
const double r_slow_rate = 10;
const double c_rate = 40;

// varies between 0 and 1
//const double p_send_fast;
evolve const double p_send_fast [0..1];

// between 20 and 40
//const double p_rate;

evolve const double p_rate [20..40];


evolve module Buffer
  fast : [0..1] init 0;
  slow : [0..1] init 0;
  buffer_s : [0..max_slow_buffer] init 0;
  buffer_f : [0..max_fast_buffer] init 0;
  consumer : [0..1] init 0;
 

  //produce
  //[] (fast=0) -> send_slow_p*p_rate : (fast'=1);
  //[] (slow=0) -> (1-send_slow_p)*p_rate : (slow'=1);
  [] (fast=0) -> p_rate*p_send_fast : (fast'=1);
  [] (slow=0) -> p_rate*0.6 : (slow'=1);

  //send
  [] (slow=1) & (buffer_s<max_slow_buffer) -> s_rate : (slow'=0) & (buffer_s' = buffer_s +1);
  // with probability proportional to the fast buffer occupancy, redirect to the slow buffer
  [] (fast=1) & (buffer_f<max_fast_buffer) -> s_rate*(max_fast_buffer-buffer_f)/max_fast_buffer : (fast'=0) & (buffer_f' = buffer_f +1);
  [redirect] (fast=1) & buffer_f > 0 & (buffer_s<max_slow_buffer) -> s_rate*(buffer_f)/max_fast_buffer : (fast'=0) & (buffer_s' = buffer_s +1);

  //receive
  [] (consumer=0) & (buffer_s > 0) -> r_slow_rate : (consumer'=1) & (buffer_s' = buffer_s - 1);
  [] (consumer=0) & (buffer_f > 0) -> r_fast_rate : (consumer'=1) & (buffer_f' = buffer_f - 1);

  //produce
  [consume] (consumer=1) ->  c_rate : (consumer'=0);
endmodule


evolve module Buffer
  fast : [0..1] init 0;
  slow : [0..1] init 0;
  buffer_s : [0..max_slow_buffer] init 0;
  buffer_f : [0..max_fast_buffer] init 0;
  consumer : [0..1] init 0;
 

  //produce
  //[] (fast=0) -> send_slow_p*p_rate : (fast'=1);
  //[] (slow=0) -> (1-send_slow_p)*p_rate : (slow'=1);
  [] (fast=0) -> p_rate*p_send_fast : (fast'=1);
  [] (slow=0) -> p_rate*0.6 : (slow'=1);

  //send
  // with probability proportional to the slow buffer occupancy, redirect to the fast buffer
  [] (slow=1) & (buffer_s<max_slow_buffer) -> s_rate*(max_slow_buffer-buffer_s)/max_slow_buffer : (slow'=0) & (buffer_s' = buffer_s +1);
  [redirect] (slow=1) & buffer_s > 0 & (buffer_f<max_fast_buffer) -> s_rate*(buffer_s)/max_slow_buffer : (slow'=0) & (buffer_f' = buffer_f +1);

  [] (fast=1) & (buffer_f<max_fast_buffer) -> s_rate : (fast'=0) & (buffer_f' = buffer_f +1);

  //receive
  [] (consumer=0) & (buffer_s > 0) -> r_slow_rate : (consumer'=1) & (buffer_s' = buffer_s - 1);
  [] (consumer=0) & (buffer_f > 0) -> r_fast_rate : (consumer'=1) & (buffer_f' = buffer_f - 1);

  //produce
  [consume] (consumer=1) ->  c_rate : (consumer'=0);
endmodule


rewards "consume"
[consume] true: 1;
endrewards

rewards "redirect"
[redirect] true: 1;
endrewards

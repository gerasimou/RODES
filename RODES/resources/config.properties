#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   in methods evochecker.EvoChecker.initialise() & evochecker.genetic.jmetal.GeneticProblem.parallelEvaluate()


#Step 0: Set PRISM-PSY parameters
	#Region radius for double-valued model parameters
	TTOLERANCE = 0.01
	TTOLERANCES = 0.01, 0.02, 0.05

	EEPSILON = 0.05
	EEPSILONS = 0.00, 0.05, 0.10
		
	SSENSITIVITY		= TRUE
	
	#eDominanceRevisedWorstCaseDominance | eDominanceWorstCaseDominance
	DOMINANCE		= eDominanceRevisedWorstCaseDominance		
	
#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
#DPM
#	MODEL_TEMPLATE_FILE = models/DPM/dpmTemplate.pm
#	PROPERTIES_FILE 	= models/DPM/dpm.csl
#Google
#	MMODEL_TEMPLATE_FILE = models/Google/googleTemplate.sm
#	PPROPERTIES_FILE 	= models/Google/google.csl
#Cluster
#	MMODEL_TEMPLATE_FILE = models/Cluster/clusterTemplate.sm
#	PPROPERTIES_FILE 	= models/Cluster/cluster.csl
#Buffer
	MMODEL_TEMPLATE_FILE = models/Buffer/bufferTemplate.sm
	PPROPERTIES_FILE 	= models/Buffer/buffer.csl

	PPROBLEM = Buffer

#Step2 : Set the algorithm (MOGA or Random) to run
	AALGORITHM 	= NSGAII

#Step 3: Set the population for the MOGAs
	PPOPULATION_SIZE = 4

#Step 4: Set the maximum number of evaluations
	MMAX_EVALUATIONS = 20

#Step 5: Set the number of processors (for parallel execution) 
	#Caution: check issue#3 on GitHub: using 1 is safer
	PPROCESSORS = 2

#Step 6: Set the JVM location
#OSx
#	JJVM =  /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
	JJVM =  /usr/bin/java
	IINIT_PORT = 8870
#linux cs
	#JVM =  /usr/lib/jvm/java-7-oracle/jre/bin/java
#linux yarcc
#	JVM =  /opt/yarcc/infrastructure/java/1.8.0_05/1/default/bin/java

#Step 7: Run 
	#A) Within a Java IDE (e.g. Eclipse) run evochecker.EvoChecker
	#B) From terminal:  use the launch script
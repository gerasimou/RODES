#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   in methods evochecker.EvoChecker.initialise() & evochecker.genetic.jmetal.GeneticProblem.parallelEvaluate()

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
#FX
#	MODEL_TEMPLATE_FILE = models/FX/fxSmall.pm
#	PROPERTIES_FILE 	= models/FX/fxSmall.pctl
#DPM
#	MODEL_TEMPLATE_FILE = models/DPM/dpm.pm
#	PROPERTIES_FILE 	= models/DPM/dpm.csl
#Google
	MODEL_TEMPLATE_FILE = models/Google/googleTemplate.sm
	PROPERTIES_FILE 	= models/Google/google.csl

#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM	= RANDOM
	ALGORITHM 	= NSGAII
	#ALGORITHM 	= SPEA2
	#ALGORITHM 	= MOCELL

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 50

#Step 4: Set the maximum number of evaluations
	MAX_EVALUATIONS = 500

#Step 5: Set the number of processors (for parallel execution) 
	#Caution: check issue#3 on GitHub: using 1 is safer
	PROCESSORS = 2

#Step 6: Set the JVM location
#OSx
	JVM =  /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java
	INIT_PORT_NUM = 8860
#linux cs
	#JVM =  /usr/lib/jvm/java-7-oracle/jre/bin/java
#linux yarcc
	#JVM =  /opt/yarcc/infrastructure/java/1.8.0_05/1/default/bin/java

#Step 7: Run 
	#A) Within a Java IDE (e.g. Eclipse) run evochecker.EvoChecker
	#B) From terminal:  use the launch script